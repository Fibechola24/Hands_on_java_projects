package telusko;
//thread is unit of a process
//multithreading is performing multiple task at the same time


    //i want to print Hello and Hi 5 times simultaneously

    class Hi extends Thread{
        public void run(){
            for (int i = 0; i < 6; i++){
                System.out.println("Hi");
                try { Thread.sleep(1000); } catch (Exception e){};
            }
        }
    }
    class Hello extends Thread{
        public void run (){
            for (int i = 0; i < 6; i++){
                System.out.println("Hello");
                try {Thread.sleep(1000);} catch (Exception e){};

            }
        }

    }
    public class ThreadDemo{
    public static void main(String[] args) {
        Hi obj1 = new Hi();
        Hello obj2 = new Hello();
        Thread t1 = new Thread(obj1);
        Thread t2 = new Thread(obj2);

        t1.start();
        try {Thread.sleep(10);} catch (Exception e){};
        t2.start();

    }
    }
    
    
    
    //USING IMPLEMENTATION
    
   package telusko;
//thread is unit of a process
//multithreading is performing multiple task at the same time


    //i want to print Hello and Hi 5 times simultaneously

    class Hi implements Runnable{
        public void run(){
            for (int i = 0; i < 6; i++){
                System.out.println("Hi");
                try { Thread.sleep(1000); } catch (Exception e){};
            }
        }
    }
    class Hello implements Runnable{
        public void run (){
            for (int i = 0; i < 6; i++){
                System.out.println("Hello");
                try {Thread.sleep(1000);} catch (Exception e){};
            }
        }
    }
    public class ThreadDemo{
    public static void main(String[] args) {
       Runnable obj1 = new Hi();
       Runnable obj2 = new Hello();

       Thread t1 = new Thread(obj1);
       Thread t2 = new Thread(obj2);

        t1.start();
        try {Thread.sleep(10);} catch (Exception e){};
        t2.start();

    }
    }
    
    
    //using lambda expression
    
    
    package telusko;
//thread is unit of a process
//multithreading is performing multiple task at the same time


    //using lamda expression for anonymous class
//In lampda expression we dont have to create an instance of the class, because the class is only used once

   public class Runable{
      public static void main(String[] args) throws Exception{
         Thread t1 = new Thread(() ->
         {
            for (int i = 1; i <=5; i++){
               System.out.println("Hi");
               try{Thread.sleep(1000);} catch(Exception e){};
            }
         });

         Thread t2 = new Thread( () -> {
            for (int i = 1; i < 6; i++){
               System.out.println("Hello");
               try{ Thread.sleep(1000);}catch(Exception e){};
            }
         });

         t1.start();
         try {Thread.sleep(10);} catch(Exception e){};
         t2.start();
        // t1.isAlive(); //this will be true at this point
         t1.isDaemon();

         t1.join();
         t2.join();

         t1.isAlive(); //this will be false at this point

         System.out.println("Goodbye");
      }

   }

    

